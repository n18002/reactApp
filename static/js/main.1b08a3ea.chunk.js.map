{"version":3,"sources":["FormApp.js","App.js","serviceWorker.js","index.js"],"names":["FormApp","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","message","handleInput","bind","assertThisInitialized","send","inherits","createClass","key","_ref","target","setState","convertToKana","word","_this2","params","sentence","app_id","output_type","request","post","type","end","err","res","console","log","loadedJson","body","json","react_default","a","createElement","onChange","onClick","JSON","stringify","converted","Component","App","FormApp_FormApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRAGaA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,MAAO,GACPC,QAAS,IAGXT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IACnBA,EAAKa,KAAOb,EAAKa,KAAKF,KAAVV,OAAAW,EAAA,EAAAX,CAAAD,IATKA,EADrB,OAAAC,OAAAa,EAAA,EAAAb,CAAAJ,EAAAC,GAAAG,OAAAc,EAAA,EAAAd,CAAAJ,EAAA,EAAAmB,IAAA,cAAAR,MAAA,SAAAS,GAaqC,IAAXT,EAAWS,EAArBC,OAAUV,MACtBL,KAAKgB,SAAS,CACZX,YAfN,CAAAQ,IAAA,OAAAR,MAAA,WAoBIL,KAAKiB,cAAcjB,KAAKI,MAAMC,SApBlC,CAAAQ,IAAA,gBAAAR,MAAA,SAuBiBa,GAAM,IAAAC,EAAAnB,KAGboB,EAAS,CACbC,SAAUH,EACVI,OAHU,mEAIVC,YAAa,YAGfC,IACGC,KATS,uCAUTC,KAAK,oBACLhB,KAAKU,GACLO,IAAI,SAACC,EAAKC,GACT,GAAID,EAAK,OAAOE,QAAQC,IAAIH,GAC5BT,EAAKa,WAAWH,EAAII,UAtC5B,CAAApB,IAAA,aAAAR,MAAA,SA0Cc6B,GACV,IAAKA,EAAM,OAAOJ,QAAQC,IAAI,uBAC9B/B,KAAKgB,SAAS,CAAEV,QAAS4B,MA5C7B,CAAArB,IAAA,SAAAR,MAAA,WAgDI,OACE8B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEX,KAAK,OACLrB,MAAOL,KAAKI,MAAMC,MAClBiC,SAAUtC,KAAKO,cAEjB4B,EAAAC,EAAAC,cAAA,UAAQE,QAASvC,KAAKU,MAAtB,gBACAyB,EAAAC,EAAAC,cAAA,WAAMG,KAAKC,UAAUzC,KAAKI,MAAME,QAAQoC,iBAxDhDhD,EAAA,CAA6BiD,aCiCdC,0LA7BX,OACET,EAAAC,EAAAC,cAACQ,EAAD,kDAKF7C,KAAKiB,wDAIL,IAEMG,EAAS,CACbC,SAAU,eACVC,OAHU,mEAIVC,YAAa,YAGfC,IACGC,KATS,uCAUTC,KAAK,oBACLhB,KAAKU,GACLO,IAAI,SAACC,EAAKC,GACTC,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,YA1BFc,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b08a3ea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport request from 'superagent'\n\nexport class FormApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: '',\n      message: ''\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.send = this.send.bind(this);\n  }\n\n  handleInput({ target: { value } }) {\n    this.setState({\n      value\n    });\n  }\n\n  send() {\n    this.convertToKana(this.state.value)\n  }\n\n  convertToKana (word) {\n    const url = 'https://labs.goo.ne.jp/api/hiragana'\n    const key = '7f5e48bf442a304d3530c0b8ad15e724de82c37d7928f44b6727b85b748dc5f6'\n    const params = {\n      sentence: word,\n      app_id: key,\n      output_type: 'hiragana'\n    }\n\n    request\n      .post(url)\n      .type('application/json')\n      .send(params)\n      .end((err, res) => {\n        if (err) return console.log(err)\n        this.loadedJson(res.body)\n      })\n  }\n\n  loadedJson (json) {\n    if (!json) return console.log('json data Not found')\n    this.setState({ message: json })\n  }\n\n  render() {\n    return (\n      <div>\n        <input\n          type=\"text\"\n          value={this.state.value}\n          onChange={this.handleInput}\n        />\n        <button onClick={this.send}>変換</button>\n        <div>{JSON.stringify(this.state.message.converted)}</div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { FormApp } from './FormApp';\nimport request from 'superagent'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <FormApp />\n    )\n  }\n\n  componentDidMount () {\n    this.convertToKana()\n  }\n\n  convertToKana () {\n    const url = 'https://labs.goo.ne.jp/api/hiragana'\n    const key = '7f5e48bf442a304d3530c0b8ad15e724de82c37d7928f44b6727b85b748dc5f6'\n    const params = {\n      sentence: '変態',\n      app_id: key,\n      output_type: 'hiragana'\n    }\n\n    request\n      .post(url)\n      .type('application/json')\n      .send(params)\n      .end((err, res) => {\n        console.log(err)\n        console.log(res)\n      })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}